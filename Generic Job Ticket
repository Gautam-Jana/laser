import React, { useState } from 'react';

// Form data interface
interface FormData {
  region: string;
  companyCode: string;
  procedure: string;
  description: string;
  priority: string;
  company: string;
  dueOutBy: string;
  datasetOrigin: string;
  controlCard: string;
  dataFile: string;
  specialInstructions: string;
  printOption: string;
  allowMixedCase: boolean;
  computerRoom: boolean;
  user: boolean;
  network: boolean;
}

// Error interface
interface FormErrors {
  region?: string;
  companyCode?: string;
  procedure?: string;
  description?: string;
  priority?: string;
  company?: string;
  dueOutBy?: string;
  datasetOrigin?: string;
  controlCard?: string;
  dataFile?: string;
  specialInstructions?: string;
  printOption?: string;
}

// Mock SDF Components (replace with actual imports)
const SdfBoxStack: React.FC<{ children?: React.ReactNode }> = ({ children }) => (
  <div>{children}</div>
);

const SdfButton: React.FC<{
  emphasis?: string;
  slots?: string;
  icon?: string;
  className?: string;
  children?: React.ReactNode;
  onClick?: () => void;
}> = ({ emphasis, slots, icon, className, children, onClick }) => (
  <button className={className} onClick={onClick}>
    {children}
  </button>
);

const SdfCard: React.FC<{ className?: string; children?: React.ReactNode }> = ({ className, children }) => (
  <div className={className}>{children}</div>
);

const SdfCheckbox: React.FC<{
  label?: string;
  className?: string;
  checked?: boolean;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
  name?: string;
}> = ({ label, className, checked, onChange, name }) => (
  <label className={className}>
    <input type="checkbox" checked={checked} onChange={onChange} name={name} />
    {label}
  </label>
);

const SdfFileSelector: React.FC<{
  useMenu?: string;
  className?: string;
  buttonText?: string;
  icon?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
}> = ({ useMenu, className, buttonText, icon, onChange }) => (
  <div className={className}>
    <input type="file" onChange={onChange} />
  </div>
);

const SdfInput: React.FC<{
  name?: string;
  state?: string;
  className?: string;
  requiredState?: string;
  autoComplete?: string;
  descriptionale?: string;
  id?: string;
  placeholder?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
}> = ({ name, state, className, requiredState, autoComplete, descriptionale, id, placeholder, value, onChange }) => (
  <input
    type="text"
    name={name}
    className={className}
    id={id}
    placeholder={placeholder}
    value={value}
    onChange={onChange}
  />
);

const SdfLink: React.FC<{ className?: string; children?: React.ReactNode }> = ({ className, children }) => (
  <a href="#" className={className}>{children}</a>
);

const SdfSelectSimple: React.FC<{
  className?: string;
  label?: string;
  filterable?: string;
  loading?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLSelectElement>) => void;
}> = ({ className, label, filterable, loading, value, onChange }) => (
  <select className={className} value={value} onChange={onChange}>
    <option value="">Select {label}</option>
    <option value="option1">Option 1</option>
    <option value="option2">Option 2</option>
  </select>
);

const SdfTextarea: React.FC<{
  rows?: string;
  className?: string;
  value?: string;
  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;
}> = ({ rows, className, value, onChange }) => (
  <textarea rows={parseInt(rows || "1")} className={className} value={value} onChange={onChange} />
);

const SfcShellAppBar: React.FC<{ size?: string; className?: string; children?: React.ReactNode }> = ({ size, className, children }) => (
  <div className={className}>{children}</div>
);

const Main: React.FC = () => {
  // Initial form state
  const initialFormData: FormData = {
    region: '',
    companyCode: '',
    procedure: '',
    description: '',
    priority: '',
    company: '',
    dueOutBy: '',
    datasetOrigin: '',
    controlCard: '',
    dataFile: '',
    specialInstructions: '',
    printOption: '',
    allowMixedCase: false,
    computerRoom: false,
    user: false,
    network: false
  };

  const [formData, setFormData] = useState<FormData>(initialFormData);
  const [errors, setErrors] = useState<FormErrors>({});

  // Handle input changes
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    const checked = (e.target as HTMLInputElement).checked;
    
    setFormData({
      ...formData,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  // Validation function
  const validateForm = (): boolean => {
    const newErrors: FormErrors = {};

    // Required field validations
    if (!formData.region) newErrors.region = 'Region is required';
    if (!formData.companyCode) newErrors.companyCode = 'Company Code is required';
    if (!formData.procedure) newErrors.procedure = 'Procedure is required';
    if (!formData.description) newErrors.description = 'Description is required';
    if (!formData.priority) newErrors.priority = 'Priority is required';
    if (!formData.company) newErrors.company = 'Company is required';
    if (!formData.dueOutBy) newErrors.dueOutBy = 'Due Out By is required';
    if (!formData.datasetOrigin) newErrors.datasetOrigin = 'Dataset Origin is required';
    if (!formData.controlCard) newErrors.controlCard = 'Control Card is required';
    if (!formData.dataFile) newErrors.dataFile = 'Data File is required';

    // Format validation for Due Out By (HHMM format)
    const dueOutByRegex = /^([0-1][0-9]|2[0-3])([0-5][0-9])$/;
    if (formData.dueOutBy && !dueOutByRegex.test(formData.dueOutBy)) {
      newErrors.dueOutBy = 'Due Out By must be in HHMM format';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Handle form submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (validateForm()) {
      // Form is valid, proceed with submission
      console.log('Form submitted:', formData);
      alert('Form submitted successfully!');
    } else {
      console.log('Form has errors:', errors);
    }
  };

  // Handle form clear
  const handleClear = () => {
    setFormData(initialFormData);
    setErrors({});
  };

  return (
    <div>
      <SdfBoxStack></SdfBoxStack>
      <SfcShellAppBar size="small" className="w-full">Laser Storage Facility</SfcShellAppBar>
      
      <div className="w-full px-2 max-w-screen-md mx-auto">
        <div className="flex flex-wrap justify-start gap-2 my-1">
          <div className="w-full md:w-64">
            <SdfSelectSimple
              className="w-full rounded-lg border border-gray-300 shadow-sm"
              label="Region"
              filterable=""
              loading=""
              value={formData.region}
              onChange={handleInputChange}
            />
            {errors.region && <p className="text-red-400 text-xs mt-1">{errors.region}</p>}
          </div>
          
          <div className="w-full md:w-64">
            <SdfSelectSimple
              className="w-full rounded-lg border border-gray-300 shadow-sm"
              label="Company Code"
              filterable=""
              loading=""
              value={formData.companyCode}
              onChange={handleInputChange}
            />
            {errors.companyCode && <p className="text-red-400 text-xs mt-1">{errors.companyCode}</p>}
          </div>
        </div>

        <SdfCard className="relative bg-white/18 backdrop-blur-xl shadow-xl rounded-2x1 p-1.5 border border-white/28 overflow-hidden w-full">
          <div className="w-full flex flex-col items-center">
            <div className="flex flex-col items-center w-full max-w-xs">
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm">Procedure</span>
                <SdfInput
                  name="procedure"
                  state="normal"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  required-state=""
                  autocomplete=""
                  descriptionale=""
                  id="batch_number"
                  value={formData.procedure}
                  onChange={handleInputChange}
                />
              </div>
              {errors.procedure && <p className="text-red-400 text-xs mt-1">{errors.procedure}</p>}
              
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm">Description</span>
                <SdfInput
                  name="description"
                  state="normal"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  required-state="default"
                  autocomplete="given-name"
                  value={formData.description}
                  onChange={handleInputChange}
                />
              </div>
              {errors.description && <p className="text-red-400 text-xs mt-1">{errors.description}</p>}
              
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm">Priority</span>
                <SdfInput
                  name="priority"
                  state="normal"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  required-state="default"
                  autocomplete="given-name"
                  value={formData.priority}
                  onChange={handleInputChange}
                />
              </div>
              {errors.priority && <p className="text-red-400 text-xs mt-1">{errors.priority}</p>}
            </div>

            <div className="flex flex-col items-center w-full max-w-xs">
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm">Company</span>
                <SdfInput
                  id="demo-component1"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  value={formData.company}
                  onChange={handleInputChange}
                  name="company"
                />
              </div>
              {errors.company && <p className="text-red-400 text-xs mt-1">{errors.company}</p>}
              
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm">Due Out By</span>
                <SdfInput
                  name="dueOutBy"
                  state="normal"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  required-state="default"
                  autocomplete="given-name"
                  placeholder="HHMM"
                  value={formData.dueOutBy}
                  onChange={handleInputChange}
                />
              </div>
              {errors.dueOutBy && <p className="text-red-400 text-xs mt-1">{errors.dueOutBy}</p>}
              
              <div className="flex items-center mb-0.5 w-full">
                <span className="text-white font-black w-28 text-sm mr-1">Dataset Origin</span>
                <SdfInput
                  name="datasetOrigin"
                  state="normal"
                  className="w-full border-l-4 text-white font-bold ease-in-out tracking-wide h-7"
                  required-state="default"
                  autocomplete="given-name"
                  value={formData.datasetOrigin}
                  onChange={handleInputChange}
                />
              </div>
              {errors.datasetOrigin && <p className="text-red-400 text-xs mt-1">{errors.datasetOrigin}</p>}
            </div>

            <div className="flex flex-col items-center w-full max-w-xs mt-4 ml-2">
              <div className="w-full mb-0.5">
                <SdfFileSelector use-menu="" className="w-full mb-0.5 ml-28" button-text="Choose" icon="action-upload" />
                <div className="flex items-center w-full">
                  <span className="text-white font-black text-sm mr-1">Control Card</span>
                  <SdfTextarea 
                    rows="3" 
                    className="w-56 font-bold -backdrop-hue-rotate-15ml-1 h-8 mr-2"
                    value={formData.controlCard}
                    onChange={handleInputChange}
                    name="controlCard"
                  />
                </div>
                {errors.controlCard && <p className="text-red-400 text-xs mt-1">{errors.controlCard}</p>}
              </div>

              <div className="w-full mb-0.5 ml-10 mt-4">
                <SdfFileSelector use-menu="" className="w-full mb-0.5 ml-16" button-text="Choose" icon="action-upload" />
                <div className="flex items-center w-full">
                  <span className="text-white font-black text-sm">Data File</span>
                  <SdfTextarea 
                    rows="3" 
                    className="w-56 font-bold ml-3 h-8"
                    value={formData.dataFile}
                    onChange={handleInputChange}
                    name="dataFile"
                  />
                </div>
                {errors.dataFile && <p className="text-red-400 text-xs mt-1">{errors.dataFile}</p>}
                <SdfCheckbox 
                  className="ml-16 text-xs mt-2" 
                  label="Allow Mixed Case in Data File"
                  checked={formData.allowMixedCase}
                  onChange={handleInputChange}
                  name="allowMixedCase"
                />
              </div>

              <div className="w-full mb-0.5">
                <div className="flex items-center w-full">
                  <span className="text-white font-black w-28 text-sm">Special Instructions</span>
                  <SdfTextarea
                    rows="2"
                    className="w-56 bg-gradient-to-tr from-fuchsia-600 to-indigo-600 text-white font-bold mx-2 nv-0.5 rounded-x1 h-8 ml-1"
                    value={formData.specialInstructions}
                    onChange={handleInputChange}
                    name="specialInstructions"
                  />
                </div>
                {errors.specialInstructions && <p className="text-red-400 text-xs mt-1">{errors.specialInstructions}</p>}
              </div>
            </div>

            <div className="flex flex-col items-center justify-start w-full gap-0 mt-0.5 ml-2">
              <div className="w-full max-w-xs">
                <div className="flex items-center w-full">
                  <span className="text-white font-black w-28 text-an">Print Option</span>
                  <SdfTextarea
                    rows="1"
                    className="w-56 bg-gradient-to-tr from-fuchsia-600 to-indigo-600 text-white font-bold px-2 py-0 rounded-x1 h-6"
                    value={formData.printOption}
                    onChange={handleInputChange}
                    name="printOption"
                  />
                </div>
                {errors.printOption && <p className="text-red-400 text-xs mt-1">{errors.printOption}</p>}
                <div className="flex flex-wrap gap-1 justify-center ml-10 mt-2">
                  <SdfCheckbox 
                    label="Computer Room" 
                    className="accent-indigo-600 focus:ring-0 text-xs ml-12"
                    checked={formData.computerRoom}
                    onChange={handleInputChange}
                    name="computerRoom"
                  />
                  <SdfCheckbox 
                    label="User" 
                    className="accent-indigo-600 focus:ring-0 text-xs"
                    checked={formData.user}
                    onChange={handleInputChange}
                    name="user"
                  />
                  <SdfCheckbox 
                    label="Network" 
                    className="accent-indigo-600 focus:ring-0 mr-28 text-xs mr-20"
                    checked={formData.network}
                    onChange={handleInputChange}
                    name="network"
                  />
                </div>
              </div>
            </div>

            <div className="flex flex-col items-center gap-0.5 mt-6 w-full ml-4">
              <div className="flex flex-wrap justify-center gap-1">
                <SdfButton 
                  emphasis="primary" 
                  slots="" 
                  icon="action-upload" 
                  className="w-auto min-w-[70px] text-md"
                  onClick={handleSubmit}
                >
                  Submit
                </SdfButton>
                <SdfButton 
                  emphasis="primary" 
                  slots="" 
                  icon="action-close" 
                  className="w-auto min-w-[70px] text-md"
                  onClick={handleClear}
                >
                  Clear
                </SdfButton>
                <SdfButton 
                  emphasis="primary" 
                  slots="" 
                  icon="action-help" 
                  className="w-auto min-w-[70px] text-md"
                >
                  Help
                </SdfButton>
              </div>
            </div>
          </div>
        </SdfCard>

        <div className="flex flex-wrap justify-end gap-1 mt-0.5 pr-1 bow-border overflow-visible">
          <SdfLink className="text-xs">PRIVACY</SdfLink>
          <SdfLink className="text-xs">LEGAL</SdfLink>
        </div>
      </div>
    </div>
  );
};

export default Main;
