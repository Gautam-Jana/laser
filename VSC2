import React, { useState } from 'react';
import { 
  SdfButton, SdfCard, SdfFocusPane, 
  SdfInput, SdfLink, SdfSelectSimple, SdfTab, SdfTabGroup, SfcShellAppBar 
} from '@waypoint/react-components';

interface SelectOption {
  label: string;
  value: string;
}

interface FormData {
  region: SelectOption | null;
  companyCode: SelectOption | null;
  batchNumber: string;
  reportType: SelectOption | null;
  reportName: string;
  reportHold: SelectOption | null;
  reportId: string;
  reportAge: string;
  reportFromDate: string;
  reportToDate: string;
  reportPerPage: string;
}

interface FormErrors {
  companyCode?: string;
  batchNumber?: string;
  reportName?: string;
  reportType?: string;
  reportId?: string;
  reportHold?: string;
  reportAge?: string;
  reportFromDate?: string;
  reportToDate?: string;
  reportPerPage?: string;
}

const SelectionCriteria: React.FC = () => {
  // State management
  const [activeTab, setActiveTab] = useState<'criteria' | 'reports' | 'audit'>('criteria');
  const [isFilterPaneOpen, setIsFilterPaneOpen] = useState(false);
  const [isHelpModalOpen, setIsHelpModalOpen] = useState(false);
  const [formData, setFormData] = useState<FormData>({
    region: null,
    companyCode: null,
    batchNumber: '',
    reportType: null,
    reportName: '',
    reportHold: null,
    reportId: '',
    reportAge: '',
    reportFromDate: '',
    reportToDate: '',
    reportPerPage: '25',
  });
  
  const [errors, setErrors] = useState<FormErrors>({});

  // Dropdown options
  const regionOptions: SelectOption[] = [
    { label: 'North America', value: 'na' },
    { label: 'Europe', value: 'eu' },
    { label: 'Asia Pacific', value: 'ap' },
  ];

  const companyOptions: SelectOption[] = [
    { label: 'Company A', value: 'compA' },
    { label: 'Company B', value: 'compB' },
    { label: 'Company C', value: 'compC' },
  ];

  const reportTypeOptions: SelectOption[] = [
    { label: 'Deferred', value: '1' },
    { label: 'Generic Letter', value: '2' },
    { label: 'Quarter', value: '3' },
    { label: 'Quarter w/PR', value: '4' },
    { label: 'Wrap', value: '5' },
  ];

  const reportHoldOptions: SelectOption[] = [
    { label: 'All - Show all reports', value: '0' },
    { label: 'Yes - Only show held reports', value: '1' },
    { label: 'No - Only show non-held reports', value: '2' },
  ];

  // Validation functions
  const validateWildcards = (value: string): boolean => {
    if (value.includes('""')) {
      return false;
    }
    return true;
  };

  const validateCompanyCode = (code: string): boolean => {
    if (!code) return true;
    if (!validateWildcards(code)) return false;
    return /^[a-zA-Z0-9?"]+$/.test(code);
  };

  const validateReportName = (name: string): boolean => {
    if (!name) return true;
    return /^[a-zA-Z0-9?$" ]+$/.test(name);
  };

  const validateReportId = (id: string, reportType: string | null): boolean => {
    if (!id) return true;
    if (!validateWildcards(id)) return false;
    
    if (!reportType) return true;
    
    switch(reportType) {
      case '5': // Wrap
        return /^[A-Z0-9]{1,3}#?$/.test(id) || 
               /^P\/R\d+$/.test(id) || 
               /^NetBatch\d+$/.test(id);
      
      case '3': // Quarter
      case '4': // Quarter w/PR
        return /^QBU\d+$/.test(id);
      
      case '1': // Employee Earnings (Deferred)
        return /^\d{4}Q\d{5}$/.test(id);
      
      case '2': // Municipal Tax (Generic Letter)
        return /^\d{4}QM\d{4}$/.test(id);
      
      default:
        return /^\d{2}\/\d{2}\/\d{2}$/.test(id);
    }
  };

  const validateBatchNumber = (batch: string, reportType: string | null): boolean => {
    if (!batch) return true;
    
    if (reportType === '1' || reportType === '2') {
      return batch === '0000';
    }
    
    if (!validateWildcards(batch)) return false;
    
    const cleanBatch = batch.replace(/\?/g, 'X').replace(/"/g, '');
    return cleanBatch.length >= 4 && cleanBatch.length <= 10;
  };

  const validateDate = (date: string): boolean => {
    if (!date) return true;
    const dateObj = new Date(date);
    return dateObj >= new Date('2001-01-01');
  };

  const validateReportAge = (age: string): boolean => {
    if (!age) return true;
    const ageNum = parseInt(age, 10);
    return !isNaN(ageNum) && ageNum >= 0 && Number.isInteger(ageNum);
  };

  const validatePerPage = (value: string): boolean => {
    const num = parseInt(value, 10);
    return !isNaN(num) && num > 0 && num <= 100;
  };

  const validateReportHold = (holdValue: SelectOption | null): boolean => {
    return holdValue !== null && ['0', '1', '2'].includes(holdValue.value);
  };

  // Handlers
  const handleInputChange = (e: CustomEvent<{ value: string }>, field: keyof FormData) => {
    const value = e.detail.value;
    setFormData(prev => ({ ...prev, [field]: value }));
    
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const handleSelectChange = (field: keyof FormData) => (e: CustomEvent<{ item: SelectOption | null }>) => {
    const item = e.detail.item;
    setFormData(prev => {
      const newData = { ...prev, [field]: item };
      
      if (field === 'reportType') {
        if (item?.value === '1' || item?.value === '2') {
          newData.batchNumber = '0000';
        }
      }
      
      return newData;
    });
    
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newErrors: FormErrors = {};

    // Validate all fields (implementation same as before)
    // ... [your validation logic here] ...

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }
    
    setErrors({});
    console.log('Form submitted:', formData);
    alert('Report criteria submitted successfully!');
  };

  const handleClear = () => {
    setFormData({
      region: null,
      companyCode: null,
      batchNumber: '',
      reportType: null,
      reportName: '',
      reportHold: { label: 'All - Show all reports', value: '0' },
      reportId: '',
      reportAge: '',
      reportFromDate: '',
      reportToDate: '',
      reportPerPage: '25',
    });
    setErrors({});
  };

  const handleTabChange = (tab: 'criteria' | 'reports' | 'audit') => {
    setActiveTab(tab);
  };

  // Format current date
  const currentDate = new Date();
  const formattedDate = currentDate.toLocaleDateString('en-US', {
    month: '2-digit',
    day: '2-digit',
    year: 'numeric'
  });
  const formattedTime = currentDate.toLocaleTimeString('en-US', {
    hour: '2-digit',
    minute: '2-digit',
    hour12: true
  });

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-black text-white p-4">
      <SfcShellAppBar size="small" className="bg-gray-800">
        Laser Storage Facility
      </SfcShellAppBar>

      <div className="max-w-7xl mx-auto mt-8">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <SdfSelectSimple
            className="w-full rounded-lg border border-gray-600 shadow-lg bg-gray-800 text-white"
            label="Region"
            filterable
            items={regionOptions}
            value={formData.region}
            onSdfChange={handleSelectChange('region')}
          />
          
          <SdfSelectSimple
            className="w-full rounded-lg border border-gray-600 shadow-lg bg-gray-800 text-white"
            label="Company Code"
            filterable
            items={companyOptions}
            value={formData.companyCode}
            onSdfChange={handleSelectChange('companyCode')}
          />
        </div>

        <SdfTabGroup className="mb-8">
          <SdfTab 
            active={activeTab === 'criteria'} 
            icon="ext-mdi-event-available"
            onClick={() => handleTabChange('criteria')}
          >
            Selection Criteria
          </SdfTab>
          <SdfTab 
            active={activeTab === 'reports'} 
            icon="ext-mdi-inventory"
            onClick={() => handleTabChange('reports')}
          >
            View Reports
          </SdfTab>
          <SdfTab 
            active={activeTab === 'audit'} 
            icon="base-gift"
            onClick={() => handleTabChange('audit')}
          >
            Audit Trail
          </SdfTab>
        </SdfTabGroup>

        <SdfCard className="bg-gray-800/90 backdrop-blur-lg shadow-2xl rounded-xl p-6 border border-gray-700">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-xl font-bold">Report Criteria</h2>
            <div className="text-sm text-gray-400">
              {formattedTime} {formattedDate}
            </div>
          </div>

          {activeTab === 'criteria' && (
            <form onSubmit={handleSubmit}>
              <div className="mb-6 flex justify-end">
                <SdfButton 
                  type="button"
                  onClick={() => setIsFilterPaneOpen(true)}
                  className="bg-blue-600 hover:bg-blue-700 transition-colors"
                >
                  Filter
                </SdfButton>
              </div>

              <SdfFocusPane
                closeable
                heading="Selection Criteria"
                visible={isFilterPaneOpen}
                onSdfDismiss={() => setIsFilterPaneOpen(false)}
              >
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4 p-4">
                  <div className="sdf-box">
                    <label className="text-gray-300">Company: {formData.companyCode?.label || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Batch: {formData.batchNumber || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt Name: {formData.reportName || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt ID: {formData.reportId || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt Type: {formData.reportType?.label || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt Hold: {formData.reportHold?.label || 'ALL'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt Age: {formData.reportAge || 'N/A'}</label>
                  </div>
                  <div className="sdf-box">
                    <label className="text-gray-300">Rpt Fro Data: {formData.reportFromDate || 'N/A'}</label>
                  </div>
                </div>
              </SdfFocusPane>

              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div>
                  <SdfInput
                    label="Batch Number"
                    value={formData.batchNumber}
                    onSdfChange={(e) => handleInputChange(e, 'batchNumber')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.batchNumber && (
                    <div className="text-red-500 text-sm mt-1">{errors.batchNumber}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report Name"
                    value={formData.reportName}
                    onSdfChange={(e) => handleInputChange(e, 'reportName')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportName && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportName}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report Id"
                    value={formData.reportId}
                    onSdfChange={(e) => handleInputChange(e, 'reportId')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportId && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportId}</div>
                  )}
                </div>
                
                <div>
                  <SdfSelectSimple
                    label="Report Type"
                    items={reportTypeOptions}
                    value={formData.reportType}
                    onSdfChange={handleSelectChange('reportType')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportType && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportType}</div>
                  )}
                </div>
                
                <div>
                  <SdfSelectSimple
                    label="Report Hold"
                    items={reportHoldOptions}
                    value={formData.reportHold}
                    onSdfChange={handleSelectChange('reportHold')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportHold && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportHold}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report Age (Days)"
                    type="number"
                    value={formData.reportAge}
                    onSdfChange={(e) => handleInputChange(e, 'reportAge')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportAge && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportAge}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report From Date"
                    type="date"
                    value={formData.reportFromDate}
                    onSdfChange={(e) => handleInputChange(e, 'reportFromDate')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportFromDate && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportFromDate}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report To Date"
                    type="date"
                    value={formData.reportToDate}
                    onSdfChange={(e) => handleInputChange(e, 'reportToDate')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportToDate && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportToDate}</div>
                  )}
                </div>
                
                <div>
                  <SdfInput
                    label="Report Per Page"
                    type="number"
                    value={formData.reportPerPage}
                    onSdfChange={(e) => handleInputChange(e, 'reportPerPage')}
                    className="w-full bg-gray-700 border-gray-600 text-white"
                  />
                  {errors.reportPerPage && (
                    <div className="text-red-500 text-sm mt-1">{errors.reportPerPage}</div>
                  )}
                </div>
              </div>

              <div className="flex flex-wrap justify-start gap-4 pt-4 border-t border-gray-700">
                <SdfButton 
                  type="submit"
                  emphasis="primary"
                  className="bg-green-600 hover:bg-green-700 px-6 py-3 transition-colors"
                  icon="action-upload"
                >
                  Submit
                </SdfButton>
                
                <SdfButton 
                  type="button"
                  onClick={handleClear}
                  emphasis="primary"
                  className="bg-gray-600 hover:bg-gray-700 px-6 py-3 transition-colors"
                  icon="action-close"
                >
                  Clear
                </SdfButton>
                
                <SdfButton 
                  type="button"
                  onClick={() => setIsHelpModalOpen(true)}
                  emphasis="primary"
                  className="bg-blue-600 hover:bg-blue-700 px-6 py-3 transition-colors"
                  icon="action-help"
                >
                  Help
                </SdfButton>
              </div>
            </form>
          )}

          {activeTab === 'reports' && (
            <div className="py-12 text-center">
              <h3 className="text-xl font-semibold mb-4">View Reports</h3>
              <p className="text-gray-400">Select criteria and submit to view generated reports</p>
            </div>
          )}

          {activeTab === 'audit' && (
            <div className="py-12 text-center">
              <h3 className="text-xl font-semibold mb-4">Audit Trail</h3>
              <p className="text-gray-400">Audit logs will appear here</p>
            </div>
          )}
        </SdfCard>

        <div className="flex justify-center gap-8 mt-8 text-sm">
          <SdfLink className="text-blue-400 hover:text-blue-300 transition-colors">PRIVACY</SdfLink>
          <SdfLink className="text-blue-400 hover:text-blue-300 transition-colors">LEGAL</SdfLink>
        </div>
      </div>
    </div>
  );
};

export default SelectionCriteria;
