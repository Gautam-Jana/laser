import React, { useState, useEffect, useRef } from 'react';
import './AutoPay.css';

// Type definitions for better type safety
type FormData = {
  racf_id: string;
  password: string;
};

type ValidationErrors = {
  racf_id?: string;
  password?: string;
  form?: string;
};

const AutoPay = () => {
  // State management
  const [formData, setFormData] = useState<FormData>({
    racf_id: '',
    password: ''
  });
  const [validationErrors, setValidationErrors] = useState<ValidationErrors>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{ type: 'success' | 'error'; message: string } | null>(null);
  
  // Refs for accessibility and focus management
  const racfIdRef = useRef<HTMLInputElement>(null);
  const firstErrorRef = useRef<HTMLDivElement>(null);

  // Validate form inputs
  const validate = (): boolean => {
    const errors: ValidationErrors = {};
    
    if (!formData.racf_id.trim()) {
      errors.racf_id = 'RACF ID is required';
    } else if (!/^[a-zA-Z0-9]{3,8}$/.test(formData.racf_id)) {
      errors.racf_id = 'Invalid RACF ID format';
    }
    
    if (!formData.password) {
      errors.password = 'Password is required';
    } else if (formData.password.length < 8) {
      errors.password = 'Password must be at least 8 characters';
    } else if (!/[A-Z]/.test(formData.password)) {
      errors.password = 'Password must contain at least one uppercase letter';
    } else if (!/[0-9]/.test(formData.password)) {
      errors.password = 'Password must contain at least one number';
    }
    
    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  };

  // Handle input changes with validation
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
    
    // Clear field-specific errors when user types
    if (validationErrors[name as keyof ValidationErrors]) {
      setValidationErrors(prev => {
        const newErrors = { ...prev };
        delete newErrors[name as keyof ValidationErrors];
        return newErrors;
      });
    }
  };

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setSubmitStatus(null);
    
    if (!validate()) {
      setSubmitStatus({
        type: 'error',
        message: 'Please fix the errors in the form'
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // In production, use environment variables for API endpoints
      const response = await fetch(process.env.REACT_APP_AUTOPAY_API_URL || '/api/autopay', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify({
          racf_id: formData.racf_id.trim(),
          // In real application, password should be hashed before sending
        }),
        credentials: 'include' // For ADP cookie authentication
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP error! Status: ${response.status}`);
      }

      const data = await response.json();
      setSubmitStatus({
        type: 'success',
        message: data.message || 'AutoPay setup successful!'
      });
      
      // Reset form on successful submission
      handleReset();
    } catch (err) {
      const error = err as Error;
      setSubmitStatus({
        type: 'error',
        message: error.message || 'An unexpected error occurred'
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // Reset form to initial state
  const handleReset = () => {
    setFormData({
      racf_id: '',
      password: ''
    });
    setValidationErrors({});
    setSubmitStatus(null);
    racfIdRef.current?.focus();
  };

  // Focus on first error for accessibility
  useEffect(() => {
    if (submitStatus?.type === 'error' && firstErrorRef.current) {
      firstErrorRef.current.focus();
    }
  }, [submitStatus, validationErrors]);

  // Determine first error field for accessibility
  const getFirstErrorField = () => {
    if (validationErrors.racf_id) return 'racf_id';
    if (validationErrors.password) return 'password';
    return null;
  };

  return (
    <div className="autopay-container">
      {/* Header Bar */}
      <sdf-shell-app-bar data-cvs-id="9" size="small" className="app-header">
        <div className="header-content">
          <div className="app-logo">
            <div className="logo-icon">
              <div className="logo-inner"></div>
            </div>
            <span className="app-title">Laser Storage Facility</span>
          </div>
          <span className="app-module">AutoPay</span>
        </div>
      </sdf-shell-app-bar>

      {/* Main Content */}
      <div className="main-content">
        <sdf-card data-cvs-id="1111" className="main-card">
          <div className="card-content">
            {submitStatus && (
              <div 
                className={`status-message ${submitStatus.type}`}
                ref={submitStatus.type === 'error' ? firstErrorRef : null}
                tabIndex={-1}
              >
                {submitStatus.message}
              </div>
            )}

            <form onSubmit={handleSubmit} noValidate>
              {/* RACF ID Field */}
              <div className="form-field">
                <label htmlFor="racf_id" className="field-label">
                  RACF ID
                </label>
                <sdf-input
                  id="racf_id"
                  data-cvs-id="21"
                  name="racf_id"
                  type="text"
                  value={formData.racf_id}
                  onChange={handleChange}
                  aria-describedby={validationErrors.racf_id ? 'racf_id-error' : undefined}
                  aria-invalid={!!validationErrors.racf_id}
                  ref={racfIdRef}
                  autoComplete="username"
                  required
                />
                {validationErrors.racf_id && (
                  <div 
                    id="racf_id-error" 
                    className="error-message"
                    ref={getFirstErrorField() === 'racf_id' ? firstErrorRef : null}
                    tabIndex={-1}
                  >
                    {validationErrors.racf_id}
                  </div>
                )}
              </div>

              {/* Password Field */}
              <div className="form-field">
                <label htmlFor="password" className="field-label">
                  Password
                </label>
                <sdf-input
                  id="password"
                  data-cvs-id="25"
                  name="password"
                  type="password"
                  value={formData.password}
                  onChange={handleChange}
                  aria-describedby={validationErrors.password ? 'password-error' : undefined}
                  aria-invalid={!!validationErrors.password}
                  autoComplete="current-password"
                  required
                />
                {validationErrors.password && (
                  <div 
                    id="password-error" 
                    className="error-message"
                    ref={getFirstErrorField() === 'password' ? firstErrorRef : null}
                    tabIndex={-1}
                  >
                    {validationErrors.password}
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="form-actions">
                <sdf-button
                  data-cvs-id="14"
                  emphasis="primary"
                  type="submit"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? (
                    <span className="button-loading">
                      <span className="spinner"></span>
                      Processing...
                    </span>
                  ) : (
                    <>
                      <span className="button-icon">↑</span>
                      Submit
                    </>
                  )}
                </sdf-button>

                <sdf-button
                  data-cvs-id="14"
                  emphasis="secondary"
                  type="button"
                  onClick={handleReset}
                  disabled={isSubmitting}
                >
                  <span className="button-icon">↻</span>
                  Reset
                </sdf-button>
              </div>
            </form>

            {/* Footer Links */}
            <div className="footer-links">
              <sdf-link href="/privacy" className="footer-link">
                PRIVACY
              </sdf-link>
              <sdf-link href="/legal" className="footer-link">
                LEGAL
              </sdf-link>
            </div>
          </div>
        </sdf-card>
      </div>
    </div>
  );
};

export default AutoPay;





CSS
_________________________________

/* Layout and Structure */
.autopay-container {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.app-header {
  background-color: #2d3748;
  color: white;
  padding: 8px 16px;
}

.header-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 40px;
}

.app-logo {
  display: flex;
  align-items: center;
}

.logo-icon {
  width: 20px;
  height: 20px;
  background-color: white;
  border-radius: 2px;
  margin-right: 8px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.logo-inner {
  width: 12px;
  height: 12px;
  background-color: #4a5568;
  border-radius: 1px;
}

.app-title, .app-module {
  font-size: 14px;
  font-weight: 500;
}

.main-content {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 20px;
  background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
}

.main-card {
  width: 100%;
  max-width: 400px;
  border-radius: 8px;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(0, 0, 0, 0.05);
}

.card-content {
  padding: 40px;
}

/* Form Elements */
.form-field {
  margin-bottom: 32px;
}

.field-label {
  display: block;
  font-size: 14px;
  font-weight: 500;
  color: #4a5568;
  margin-bottom: 8px;
}

.form-actions {
  display: flex;
  gap: 16px;
  margin-top: 40px;
}

/* Status Messages */
.status-message {
  padding: 12px;
  border-radius: 4px;
  margin-bottom: 24px;
  font-size: 14px;
  font-weight: 500;
}

.status-message.success {
  background-color: #f0fff4;
  color: #2f855a;
  border: 1px solid #c6f6d5;
}

.status-message.error {
  background-color: #fff5f5;
  color: #c53030;
  border: 1px solid #fed7d7;
}

.error-message {
  color: #e53e3e;
  font-size: 12px;
  margin-top: 4px;
  font-weight: 500;
}

/* Footer Links */
.footer-links {
  position: fixed;
  bottom: 24px;
  right: 24px;
  display: flex;
  gap: 24px;
}

.footer-link {
  color: #718096;
  text-decoration: underline;
  font-size: 13px;
  font-weight: 500;
}

/* Loading State */
.button-loading {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spinner {
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top: 2px solid white;
  width: 16px;
  height: 16px;
  animation: spin 1s linear infinite;
  margin-right: 8px;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}